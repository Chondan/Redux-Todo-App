{"version":3,"sources":["features/todos/todo.module.css","features/todos/todosSlice.js","features/todos/Todo.js","App.js","app/store.js","index.js"],"names":["module","exports","todosAdapter","createEntityAdapter","sortComparer","a","b","time","initialState","getInitialState","filter","fetchTodos","createAsyncThunk","fetch","response","json","data","map","d","userId","Date","now","todosSlice","createSlice","name","reducers","addTodo","reducer","state","action","addOne","payload","prepare","title","id","nanoid","completed","toggleTodo","isCompleted","entities","setFilter","extraReducers","fulfilled","setAll","actions","getSelectors","todos","selectTodoById","selectAll","selectById","selectTodoIds","selectIds","selectFilter","AddTodo","inputRef","useRef","dispatch","useDispatch","type","ref","onClick","current","value","focus","Item","todoId","todo","useSelector","currentFilter","isShow","todoStyles","textDecoration","cursor","style","className","styles","TodoList","todoIds","renderedItem","key","handleToggleTodo","FilterLink","children","color","isActive","FilterTodo","setCurrentFilter","Todo","App","store","configureStore","todosReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fd016ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo-item\":\"todo_todo-item__21UFt\"};","import { createAsyncThunk, createEntityAdapter, createSlice, nanoid } from '@reduxjs/toolkit';\r\n\r\nconst todosAdapter = createEntityAdapter({\r\n  sortComparer: (a, b) => b.time - a.time\r\n});\r\nconst initialState = todosAdapter.getInitialState({\r\n  filter: \"SHOW_ALL\"\r\n});\r\n\r\nconst fetchTodos = createAsyncThunk(\r\n  \"todos/fetchTodos\",\r\n  async () => {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=5\");\r\n    let data = await response.json();\r\n    data = data.map(d => {\r\n      delete d.userId;\r\n      return {\r\n        ...d,\r\n        time: Date.now(),\r\n      };\r\n    });\r\n    return data;\r\n  }  \r\n);\r\n\r\nconst todosSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState,\r\n  reducers: {\r\n    addTodo: {\r\n      reducer: (state, action) => {\r\n        todosAdapter.addOne(state, action.payload);\r\n      },\r\n      prepare: (title) => {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            time: Date.now(),\r\n            completed: false,\r\n            title\r\n          }\r\n        }\r\n      }\r\n    },\r\n    toggleTodo: {\r\n      reducer: (state, action) => {\r\n        const { id } = action.payload;\r\n        const isCompleted = state.entities[id].completed;\r\n        state.entities[id].completed = !isCompleted;\r\n      },\r\n      prepare: (id) => {\r\n        return {\r\n          payload: {\r\n            id\r\n          }\r\n        }\r\n      }\r\n    },\r\n    setFilter: (state, action) => {\r\n      state.filter = action.payload.filter;\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchTodos.fulfilled]: (state, action) => {\r\n      todosAdapter.setAll(state, action.payload);\r\n    }\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = todosSlice;\r\nexport const { addTodo, toggleTodo, setFilter } = actions;\r\nexport default reducer;\r\nexport { fetchTodos };\r\nexport const {\r\n  selectAll: selectAllTodo,\r\n  selectById: selectTodoById,\r\n  selectIds: selectTodoIds\r\n} = todosAdapter.getSelectors(state => state.todos);\r\nexport const selectFilter = state => state.todos.filter;","import React, { useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchTodos, addTodo, setFilter, selectFilter, toggleTodo, selectTodoById, selectTodoIds } from './todosSlice';\r\nimport styles from './todo.module.css';\r\n\r\nconst AddTodo = () => {\r\n  const inputRef = useRef();\r\n  const dispatch = useDispatch();\r\n  const handleAddTodoClicked = () => {\r\n    dispatch(addTodo(inputRef.current.value));\r\n    inputRef.current.value = \"\";\r\n    inputRef.current.focus();\r\n  }\r\n  return (\r\n    <div>\r\n      <input type=\"text\" ref={inputRef} />\r\n      <button onClick={handleAddTodoClicked}>Add Todo</button>\r\n      <button onClick={() => dispatch(fetchTodos())}>Fetch Todos</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Item = ({\r\n  todoId, onClick\r\n}) => {\r\n  const todo = useSelector(state => selectTodoById(state, todoId));\r\n  const currentFilter = useSelector(selectFilter);\r\n  const isShow = (currentFilter) => {\r\n    switch (currentFilter) {\r\n      case \"SHOW_ALL\":\r\n        return true;\r\n      case \"ACTIVE\":\r\n        return todo.completed ? false : true;\r\n      case \"COMPLETED\":\r\n        return todo.completed ? true : false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n  if (!isShow(currentFilter)) {\r\n    return false;\r\n  }\r\n  const todoStyles = {\r\n    textDecoration: todo.completed ? \"line-through\" : \"none\",\r\n    cursor: \"pointer\"\r\n  };\r\n  return (\r\n    <li><span style={todoStyles} className={styles[\"todo-item\"]} onClick={onClick}>{todo.title}</span></li>\r\n  );\r\n}\r\n\r\nconst TodoList = () => {\r\n  const todoIds = useSelector(selectTodoIds);\r\n  const dispatch = useDispatch();\r\n  const handleToggleTodo = (todoId) => {\r\n    dispatch(toggleTodo(todoId));\r\n  };\r\n  const renderedItem = todoIds.map(todoId => (\r\n    <Item key={todoId} todoId={todoId} onClick={() => handleToggleTodo(todoId)} />\r\n  ));\r\n  return (\r\n    <ul>\r\n      {renderedItem}\r\n    </ul>\r\n  );\r\n}\r\n\r\nconst FilterLink = ({\r\n  children, onClick, isActive\r\n}) => {\r\n  const styles = {\r\n    color: isActive() ? \"black\" : \"blue\",\r\n    cursor: \"pointer\"\r\n  }\r\n  return (\r\n    <span style={styles} onClick={onClick}>{children}</span>\r\n  );\r\n}\r\n\r\nconst FilterTodo = () => {\r\n  const currentFilter = useSelector(selectFilter);\r\n  const dispatch = useDispatch();\r\n  const isActive = (filter) => {\r\n    return currentFilter === filter;\r\n  }\r\n  const setCurrentFilter = (filter) => {\r\n    dispatch(setFilter({ filter }));\r\n  }\r\n  return (\r\n    <div>\r\n      Filter:{' '}\r\n      <FilterLink onClick={() => setCurrentFilter(\"SHOW_ALL\")} isActive={() => isActive(\"SHOW_ALL\")}>Show All</FilterLink>{', '}\r\n      <FilterLink onClick={() => setCurrentFilter(\"ACTIVE\")} isActive={() => isActive(\"ACTIVE\")}>Active</FilterLink>{', '}\r\n      <FilterLink onClick={() => setCurrentFilter(\"COMPLETED\")} isActive={() => isActive(\"COMPLETED\")}>Completed</FilterLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Todo = () => {\r\n  return (\r\n    <div>\r\n      <AddTodo />\r\n      <TodoList />\r\n      <FilterTodo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { Todo } from './features';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <h1>Todo App</h1>\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport todosReducer from '../features/todos/todosSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    todos: todosReducer,\r\n  }\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.js';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}